package task.hw5.info;
/*Таксопарк. Определить иерархию автомобилей. Создать таксопарк.
Подсчитать стоимость автопарка. Провести сортировку автомобилей парка по расходу топлива.
Найти автомобили в компании, соответствующие заданному диапазону параметров скорости.
Для каждого класса автомобилей определить toString() и использовать его для печати объекта.
Сделать таксопарк интерфейсом, определить в нем действия, которые должен выполнять таксопарк.
Создать конкретный таксопарк который будет реализовывать интерфейс таксопарка.
Грамотно распределить по пакетам классы.
- базовый класс транспортного средства абстрактный;
- каждый наследник должен определять новые свойства(свойство);
- в классе таксопарка ничего не печатать!!!(System.out.println());
- массив, который будет возвращен методом поиска автомобилей по скорости расширять
 динамически(не считать сразу кол-во подходящих под критерий автомобилей);
- в метод по поиску машин по диапазону задавать min и max скорость и проверять,
 входит ли максимальная скорость текущего автомобиля в диапазон;
- сортировка своя (Arrays.sort не использовать);
- System.arrayсopy не использовать;
- написать JUnit тесты;*/

import task.hw5.model.*;
import task.hw5.process.Vehicle;
import task.hw5.process.VehicleProcessor;

public class CarPark {
        public static void main(String[] args) {
            Vehicle[] carPark = new Vehicle[]{
                    new PassengerCar(1, 10, 3000, 120, 120, 4,
                            66),
                    new PassengerCar(2, 6, 1500, 80, 70, 4,
                            40),
                    new PassengerCar(3, 10, 6000, 160, 150, 5,
                            89),
                    new Truck(4, 15, 4000, 70, 29, 63, 7),
                    new Truck(5, 13, 7000, 100, 13, 50, 10),
                    new Minivan(6, 11, 2000, 100, 8, 48),
                    new Bus(7, 18, 8000, 120, 22, 99, "black"),
                    new ElectroCar(8, 0, 3000, 90, 78, "red"),
                    new ElectroCar(9, 8, 2500, 100, 5, "white")};

            VehicleProcessor.sortByFuel(carPark);
            VehicleProcessor.findBySpeed(carPark, 90, 110);
        }
    }

